scalar Date

type UserSettings {
  id: ID
  # TODO
}

type UserStats {
  id: ID
  # TODO
}

type UserBag {
  gold: Int
  runicEssence: Int
  packs: Int
}

type UserQuest {
  id: ID
  # TODO
}

type UserAchievement {
  id: ID
  # TODO
}

type ChatMessage {
  sender: User!
  content: String!
  timestamp: Date!
}

type UserChat {
  id: ID!
  date: Date!
  users: [User!]!
  messages: [ChatMessage!]!
}

type Game {
  id: ID
  # TODO
}

type Card {
  id: ID
  # TODO
}

type Friend {
  user: User!
  notes: String
}

type User {
  id: ID!
  name: String!
  validated: Boolean!
  state: String!
  settings: UserSettings!
  stats: UserStats!
  bag: UserBag!
  ownedCards: [Card!]!
  quests: [UserQuest!]!
  recentGames: [Game!]!
  collection: [ID!]!
  achievements: [UserAchievement!]!
  friends: [Friend!]!
  reported: [User!]!
  muted: [User!]!
  chats: [UserChat!]!
  email: String
  team: ID
  currentGame: Game
}

type ForgeTrigger {
  key: String
  name: String
  description: String
  effectType: String
}

type ForgeEffect {
  key: String
  name: String
  description: String
  text: String
}

type Forge {
  type: String!
  forgeLevel: Int
  key: String
  name: String
  text: String
  trigger: ForgeTrigger
  effect: ForgeEffect
}

type TestCard {
  name: String!
  attack: Int!
  hp: Int!
  cost: Int!
  type: String!
  unitType: String!
  level: Int!
  forge: Forge
}

type Query {
  alive: Boolean
  getUser(id: ID!): User
  login(name: String!, password: String!): String
  token: ID

  simulateForge(level: Int!): Forge
  generateCard(level: Int!): TestCard
}

type Mutation {
  createUser(name: String!, password: String!): Boolean
}